#lang sicp

(define (square x) (* x x))

(define (expmod base exp m)
    (define (check-square x)
        (define sq (remainder (square x) m))
        (if (and (> x 1) (< (- m 1) x) (= sq m) 1)
            0
            sq))
    (cond ((= exp 0)   1)
          ((even? exp) (check-square (expmod base (/ exp 2) m)))
          (else        (remainder (* base (expmod base (- exp 1) m)) m))))

(define (fast-prime? n times)
    (cond ((= times 0) true)
          ((fermat-test n) (fast-prime? n (- times 1)))
          (else false)))
(define (fermat-test n)
    (define (try-it a)
        (= (expmod a (- n 1) n) 1))
    (try-it (+ 1 (random (- n 1)))))

(define (test input answer)
    (display input)
    (display " -> ")
    (define output (fast-prime? input 100))
    (display output)
    (display " (")
    (if (equal? output answer)
        (display "passed")
        (display "failed"))
    (display ")")
    (newline))

(test 561 #f)
(test 1105 #f)
(test 1729 #f)
(test 2465 #f)
(test 2821 #f)
(test 6601 #f)

(test 2 #t)
(test 3 #t)
(test 4 #f)
(test 5 #t)
(test 6 #f)
(test 7 #t)
(test 8 #f)
(test 9 #f)

